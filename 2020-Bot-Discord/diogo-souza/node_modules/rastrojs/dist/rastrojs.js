"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var iconv_lite_1 = __importDefault(require("iconv-lite"));
var moment_1 = __importDefault(require("moment"));
var cheerio_1 = __importDefault(require("cheerio"));
var request_1 = __importDefault(require("request"));
var types_enums_1 = require("./enums/types.enums");
var RastroJS = (function () {
    function RastroJS() {
        var _this = this;
        this.track = function (codes) { return Promise.all([].concat(codes).map(function (code) { return (_this.requestObject(code)); })); };
    }
    RastroJS.prototype.requestObject = function (code) {
        var _this = this;
        if (!RastroJS.isValidOrderCode(code))
            return {
                code: code,
                isInvalid: true,
                error: 'invalid_code'
            };
        return new Promise(function (resolve, reject) { return request_1.default({
            uri: _this.uri,
            form: { objetos: code },
            gzip: true,
            method: 'POST',
            encoding: null,
            strictSSL: false
        }, function (err, res, body) { return err ? reject(err.message) : resolve(body); }); })
            .then(function (html) { return iconv_lite_1.default.decode(Buffer.from(html), 'binary'); })
            .then(function (html) { return _this.parseResponse(html); })
            .then(function (track) {
            if (track) {
                return __assign({ code: code, type: types_enums_1.TypesEnum[code.toUpperCase().substr(0, 2)] || null }, track);
            }
            else {
                return {
                    code: code,
                    isInvalid: true,
                    error: 'not_found'
                };
            }
        });
    };
    RastroJS.prototype.parseResponse = function (html) {
        var document = cheerio_1.default.load(html);
        var lines = document('.listEvent').find('tr');
        var tracks = lines
            .toArray()
            .map(function (line) {
            var lineData = document(line)
                .find('td')
                .toArray()
                .map(function (column) { return (document(column).text().replace(/[\n\r\t]/g, '')).trim(); })
                .filter(function (data) { return !!data; })
                .map(function (data) { return data.split(/\s\s+/g); });
            return {
                locale: lineData[0][2].toLowerCase(),
                status: lineData[1][0].toLowerCase(),
                observation: lineData[1][1] ? lineData[1][1].toLowerCase() : null,
                trackedAt: moment_1.default(lineData[0][0] + lineData[0][1], 'DD/MM/YYYYHH:mm').toDate(),
            };
        });
        if (!tracks.length)
            return null;
        tracks.reverse();
        var _a = [tracks[0], tracks[tracks.length - 1]], firstTrack = _a[0], lastTrack = _a[1];
        return {
            tracks: tracks,
            isDelivered: lastTrack.status.includes('objeto entregue'),
            postedAt: firstTrack.trackedAt,
            updatedAt: lastTrack.trackedAt,
        };
    };
    Object.defineProperty(RastroJS.prototype, "uri", {
        get: function () {
            return Buffer.from("\n            aHR0cHM6Ly\n            93d3cyLmNv\n            cnJlaW9zLm\n            NvbS5ici9z\n            aXN0ZW1hcy\n            9yYXN0cmVh\n            bWVudG8vcm\n            VzdWx0YWRv\n            X3NlbWNvbn\n            RlbnQuY2Zt\n            ", '\x62\x61\x73\x65\x36\x34').toString();
        },
        enumerable: true,
        configurable: true
    });
    RastroJS.isValidOrderCode = function (code) { return /^[A-Z]{2}[0-9]{9}[A-Z]{2}$/.test(code); };
    return RastroJS;
}());
exports.RastroJS = RastroJS;
